"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const ec2 = require("@aws-cdk/aws-ec2");
const ecs = require("@aws-cdk/aws-ecs");
const ecr = require("@aws-cdk/aws-ecr");
const aws_iam_1 = require("@aws-cdk/aws-iam");
const sfn = require("@aws-cdk/aws-stepfunctions");
const tasks = require("@aws-cdk/aws-stepfunctions-tasks");
const aws_logs_1 = require("@aws-cdk/aws-logs");
const aws_stepfunctions_1 = require("@aws-cdk/aws-stepfunctions");
const s3 = require("@aws-cdk/aws-s3");
const aws_events_1 = require("@aws-cdk/aws-events");
const lambda = require("@aws-cdk/aws-lambda");
const targets = require("@aws-cdk/aws-events-targets");
const ssm = require("@aws-cdk/aws-ssm");
const STACK_NAME = process.env.STACK_NAME;
const ROLE_NAME = `${STACK_NAME}-fargate-role`;
const VPC_NAME = `${STACK_NAME}-vpc`;
const CIDR_BLOCK = `198.162.0.0/24`;
const MAX_AZs = 2;
const ECR_GATLING_REPO_NAME = `${STACK_NAME}-gatling`;
const ECR_MOCKDATA_REPO_NAME = `${STACK_NAME}-mockdata`;
const ECS_CLUSTER = `${STACK_NAME}-cluster`;
const GATLING_FARGATE_TASK_DEF = `${STACK_NAME}-gatling-task-def`;
const MOCKDATA_FARGATE_TASK_DEF = `${STACK_NAME}-mockdata-task-def`;
const MEMORY_LIMIT = 2048;
const CPU = 1024;
const GATLING_CONTAINER_NAME = `${STACK_NAME}-gatling-container`;
const MOCKDATA_CONTAINER_NAME = `${STACK_NAME}-mockdata-container`;
const STATE_MACHINE_NAME = `loadtest-${STACK_NAME}`;
const S3_BUCKET_NAME = `${STACK_NAME}-loadtest`;
const BRANCH_NAME = process.env.AWS_BRANCH;
const FOLDERPATH = "./";
class PerftestStackAirlineStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // retrieving all environment variables
        const AWS_DEFAULT_REGION = process.env.AWS_DEFAULT_REGION;
        const COGNITO_USER_POOL_ARN = process.env.COGNITO_USER_POOL_ARN || "not_defined";
        const USER_POOL_ID = process.env.USER_POOL_ID || "not_defined";
        const COGNITO_CLIENT_ID = process.env.COGNITO_CLIENT_ID || "not_defined";
        const COGNITO_URL = `https://cognito-idp.${AWS_DEFAULT_REGION}.amazonaws.com/`;
        const GRAPHQL_URL = process.env.GRAPHQL_URL || "not_defined";
        const API_URL = process.env.API_URL || "not_defined";
        const GRAPHQL_API_ID = process.env.GRAPHQL_API_ID || "not_defined";
        const role = new aws_iam_1.Role(this, ROLE_NAME, {
            roleName: ROLE_NAME,
            assumedBy: new aws_iam_1.ServicePrincipal('ecs-tasks.amazonaws.com')
        });
        const bucket = new s3.Bucket(this, "s3bucket", {
            bucketName: S3_BUCKET_NAME
        });
        role.addToPolicy(new aws_iam_1.PolicyStatement({
            resources: [
                `${bucket.bucketArn}`,
                `${bucket.bucketArn}/*`
            ],
            actions: [
                's3:PutObject',
                's3:GetObjectAcl',
                's3:GetObject',
                's3:ListBucket',
                's3:PutObjectAcl',
                's3:DeleteObject'
            ]
        }));
        role.addToPolicy(new aws_iam_1.PolicyStatement({
            resources: [`${COGNITO_USER_POOL_ARN}`],
            actions: [
                'cognito-idp:AdminInitiateAuth',
                'cognito-idp:AdminCreateUser',
                'cognito-idp:AdminSetUserPassword',
                'cognito-idp:UpdateUserPoolClient',
                'cognito-idp:AdminDeleteUser'
            ]
        }));
        const vpc = new ec2.Vpc(this, VPC_NAME, {
            cidr: CIDR_BLOCK,
            maxAzs: MAX_AZs
        });
        const gatlingRepository = new ecr.Repository(this, ECR_GATLING_REPO_NAME, {
            repositoryName: ECR_GATLING_REPO_NAME
        });
        const mockDataRepository = new ecr.Repository(this, ECR_MOCKDATA_REPO_NAME, {
            repositoryName: ECR_MOCKDATA_REPO_NAME
        });
        const cluster = new ecs.Cluster(this, ECS_CLUSTER, {
            vpc: vpc,
            clusterName: ECS_CLUSTER
        });
        const gatlingTaskDefinition = new ecs.FargateTaskDefinition(this, GATLING_FARGATE_TASK_DEF, {
            family: GATLING_FARGATE_TASK_DEF,
            executionRole: role,
            taskRole: role,
            memoryLimitMiB: MEMORY_LIMIT,
            cpu: CPU
        });
        const mockDataTaskDefinition = new ecs.FargateTaskDefinition(this, MOCKDATA_FARGATE_TASK_DEF, {
            family: MOCKDATA_FARGATE_TASK_DEF,
            executionRole: role,
            taskRole: role,
            memoryLimitMiB: MEMORY_LIMIT,
            cpu: CPU
        });
        const gatlingLogging = new ecs.AwsLogDriver({
            logGroup: new aws_logs_1.LogGroup(this, GATLING_CONTAINER_NAME, {
                logGroupName: `/aws/ecs/${GATLING_CONTAINER_NAME}`,
                retention: aws_logs_1.RetentionDays.ONE_WEEK
            }),
            streamPrefix: "gatling"
        });
        const mockDatalogging = new ecs.AwsLogDriver({
            logGroup: new aws_logs_1.LogGroup(this, MOCKDATA_CONTAINER_NAME, {
                logGroupName: `/aws/ecs/${MOCKDATA_CONTAINER_NAME}`,
                retention: aws_logs_1.RetentionDays.ONE_WEEK
            }),
            streamPrefix: "mockdata"
        });
        // Create container from local `Dockerfile` for Gatling
        const gatlingAppContainer = gatlingTaskDefinition.addContainer(GATLING_CONTAINER_NAME, {
            image: ecs.ContainerImage.fromEcrRepository(gatlingRepository),
            logging: gatlingLogging
        });
        const tokenCSV = ssm.StringParameter.fromStringParameterAttributes(this, 'TOKEN_CSV', {
            parameterName: `/${BRANCH_NAME}/service/loadtest/csv/token`,
            version: 1
        });
        const userCSV = ssm.StringParameter.fromStringParameterAttributes(this, 'USER_CSV', {
            parameterName: `/${BRANCH_NAME}/service/loadtest/csv/user`,
            version: 1
        });
        const loadtestBucket = ssm.StringParameter.fromStringParameterAttributes(this, 'S3_BUCKET', {
            parameterName: `/${BRANCH_NAME}/service/s3/loadtest/bucket`,
            version: 1
        });
        const userPoolID = ssm.StringParameter.fromStringParameterAttributes(this, 'USER_POOL_ID', {
            parameterName: `/${BRANCH_NAME}/service/amplify/auth/userpool/id`,
            version: 1
        });
        const cognitoClientID = ssm.StringParameter.fromStringParameterAttributes(this, 'COGNITO_CLIENT_ID', {
            parameterName: `/${BRANCH_NAME}/service/amplify/auth/userpool/clientId`,
            version: 1
        });
        const mockDataAppContainer = mockDataTaskDefinition.addContainer(MOCKDATA_CONTAINER_NAME, {
            image: ecs.ContainerImage.fromEcrRepository(mockDataRepository),
            logging: mockDatalogging,
            environment: {
                "TOKEN_CSV": tokenCSV.stringValue,
                "USER_CSV": userCSV.stringValue,
                "AWS_REGION": `${AWS_DEFAULT_REGION}`,
                "S3_BUCKET": loadtestBucket.stringValue,
                "USER_POOL_ID": userPoolID.stringValue,
                "COGNITO_CLIENT_ID": cognitoClientID.stringValue,
                "FOLDERPATH": FOLDERPATH
            }
        });
        // Step function for setting the load test
        const setupUsers = new sfn.Task(this, "Setup Users", {
            task: new tasks.RunEcsFargateTask({
                cluster,
                taskDefinition: mockDataTaskDefinition,
                assignPublicIp: true,
                containerOverrides: [{
                        containerName: mockDataAppContainer.containerName,
                        command: aws_stepfunctions_1.Data.listAt('$.commands'),
                        environment: [
                            {
                                name: 'setup-users',
                                value: aws_stepfunctions_1.Context.taskToken
                            }
                        ]
                    }],
                integrationPattern: aws_stepfunctions_1.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN
            })
        });
        const loadFlights = new sfn.Task(this, "Load Flights", {
            task: new tasks.RunEcsFargateTask({
                cluster,
                taskDefinition: mockDataTaskDefinition,
                assignPublicIp: true,
                containerOverrides: [{
                        containerName: mockDataAppContainer.containerName,
                        command: aws_stepfunctions_1.Data.listAt('$.commands'),
                        environment: [
                            {
                                name: 'load-flights',
                                value: aws_stepfunctions_1.Context.taskToken
                            }
                        ]
                    }],
                integrationPattern: aws_stepfunctions_1.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN
            })
        });
        const runGatling = new sfn.Task(this, "Run Gatling", {
            task: new tasks.RunEcsFargateTask({
                cluster,
                taskDefinition: gatlingTaskDefinition,
                assignPublicIp: true,
                containerOverrides: [{
                        containerName: gatlingAppContainer.containerName,
                        command: aws_stepfunctions_1.Data.listAt('$.commands'),
                        environment: [
                            {
                                name: 'run-gatling',
                                value: aws_stepfunctions_1.Context.taskToken
                            }
                        ]
                    }],
                integrationPattern: aws_stepfunctions_1.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN
            })
        });
        const consolidateReport = new sfn.Task(this, "Consolidate Report", {
            task: new tasks.RunEcsFargateTask({
                cluster,
                taskDefinition: gatlingTaskDefinition,
                assignPublicIp: true,
                containerOverrides: [{
                        containerName: gatlingAppContainer.containerName,
                        command: aws_stepfunctions_1.Data.listAt('$.commands'),
                        environment: [
                            {
                                name: 'consolidate-report',
                                value: aws_stepfunctions_1.Context.taskToken
                            }
                        ]
                    }],
                integrationPattern: aws_stepfunctions_1.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN
            })
        });
        const cleanUp = new sfn.Task(this, "Clean Up", {
            task: new tasks.RunEcsFargateTask({
                cluster,
                taskDefinition: mockDataTaskDefinition,
                assignPublicIp: true,
                containerOverrides: [{
                        containerName: mockDataAppContainer.containerName,
                        command: aws_stepfunctions_1.Data.listAt('$.commands'),
                        environment: [
                            {
                                name: 'clean-up',
                                value: aws_stepfunctions_1.Context.taskToken
                            }
                        ]
                    }],
                integrationPattern: aws_stepfunctions_1.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN
            })
        });
        const stepfuncDefinition = setupUsers
            .next(loadFlights)
            .next(runGatling)
            .next(consolidateReport)
            .next(cleanUp);
        const loadtestsfn = new sfn.StateMachine(this, STATE_MACHINE_NAME, {
            stateMachineName: STATE_MACHINE_NAME,
            definition: stepfuncDefinition
        });
        const ecsLambda = new lambda.Function(this, "ecstasklambda", {
            runtime: lambda.Runtime.NODEJS_10_X,
            handler: "index.handler",
            code: new lambda.AssetCode("lambda"),
            functionName: `${STACK_NAME}-ecs-task-change`
        });
        ecsLambda.addToRolePolicy(new aws_iam_1.PolicyStatement({
            actions: ["states:SendTaskSuccess"],
            resources: [loadtestsfn.stateMachineArn]
        }));
        const cwRule = new aws_events_1.Rule(this, "cw-rule", {
            description: "Rule that looks at ECS Task change state and triggers Lambda function",
            enabled: true,
            ruleName: "ECS-task-change-cdk",
            targets: []
        });
        new ssm.StringParameter(this, 'LoadTestS3Bucket', {
            // description: 'Some user-friendly description',
            parameterName: `/${BRANCH_NAME}/service/s3/loadtest/bucket`,
            stringValue: bucket.bucketName,
        });
        cwRule.addEventPattern({
            source: ['aws.ecs'],
            detailType: ["ECS Task State Change"],
            detail: {
                clusterArn: [cluster.clusterArn],
                lastStatus: ["STOPPED"]
            }
        });
        cwRule.addTarget(new targets.LambdaFunction(ecsLambda));
    }
}
exports.PerftestStackAirlineStack = PerftestStackAirlineStack;
//# sourceMappingURL=data:application/json;base64,