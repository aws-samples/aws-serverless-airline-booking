"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const ec2 = require("@aws-cdk/aws-ec2");
const ecs = require("@aws-cdk/aws-ecs");
const ecr = require("@aws-cdk/aws-ecr");
const aws_iam_1 = require("@aws-cdk/aws-iam");
const sfn = require("@aws-cdk/aws-stepfunctions");
const tasks = require("@aws-cdk/aws-stepfunctions-tasks");
const aws_logs_1 = require("@aws-cdk/aws-logs");
const aws_stepfunctions_1 = require("@aws-cdk/aws-stepfunctions");
const s3 = require("@aws-cdk/aws-s3");
const aws_events_1 = require("@aws-cdk/aws-events");
const lambda = require("@aws-cdk/aws-lambda");
const targets = require("@aws-cdk/aws-events-targets");
const ssm = require("@aws-cdk/aws-ssm");
const STACK_NAME = process.env.STACK_NAME;
const ROLE_NAME = `${STACK_NAME}-fargate-role`;
const VPC_NAME = `${STACK_NAME}-vpc`;
const CIDR_BLOCK = `198.162.0.0/24`;
const MAX_AZs = 2;
const ECR_GATLING_REPO_NAME = `${STACK_NAME}-gatling`;
const ECR_MOCKDATA_REPO_NAME = `${STACK_NAME}-mockdata`;
const ECS_CLUSTER = `${STACK_NAME}-cluster`;
const GATLING_FARGATE_TASK_DEF = `${STACK_NAME}-gatling-task-def`;
const MOCKDATA_FARGATE_TASK_DEF = `${STACK_NAME}-mockdata-task-def`;
const MEMORY_LIMIT = 2048;
const CPU = 1024;
const GATLING_CONTAINER_NAME = `${STACK_NAME}-gatling-container`;
const MOCKDATA_CONTAINER_NAME = `${STACK_NAME}-mockdata-container`;
const STATE_MACHINE_NAME = `loadtest-${STACK_NAME}`;
const S3_BUCKET_NAME = `${STACK_NAME}-loadtest`;
const BRANCH_NAME = process.env.AWS_BRANCH;
const FOLDERPATH = "./";
class PerftestStackAirlineStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // retrieving all environment variables
        const AWS_DEFAULT_REGION = process.env.AWS_DEFAULT_REGION;
        const COGNITO_USER_POOL_ARN = process.env.COGNITO_USER_POOL_ARN || "not_defined";
        const USER_POOL_ID = process.env.USER_POOL_ID || "not_defined";
        const COGNITO_CLIENT_ID = process.env.COGNITO_CLIENT_ID || "not_defined";
        const COGNITO_URL = `https://cognito-idp.${AWS_DEFAULT_REGION}.amazonaws.com/`;
        const APPSYNC_URL = process.env.APPSYNC_URL || "not_defined";
        const API_URL = process.env.API_URL || "not_defined";
        const GRAPHQL_API_ID = process.env.GRAPHQL_API_ID || "not_defined";
        const role = new aws_iam_1.Role(this, ROLE_NAME, {
            roleName: ROLE_NAME,
            assumedBy: new aws_iam_1.ServicePrincipal('ecs-tasks.amazonaws.com')
        });
        const bucket = new s3.Bucket(this, "s3bucket", {
            bucketName: S3_BUCKET_NAME
        });
        role.addToPolicy(new aws_iam_1.PolicyStatement({
            resources: [
                `${bucket.bucketArn}`,
                `${bucket.bucketArn}/*`
            ],
            actions: [
                's3:PutObject',
                's3:GetObjectAcl',
                's3:GetObject',
                's3:ListBucket',
                's3:PutObjectAcl',
                's3:DeleteObject'
            ]
        }));
        role.addToPolicy(new aws_iam_1.PolicyStatement({
            resources: [`${COGNITO_USER_POOL_ARN}`],
            actions: [
                'cognito-idp:AdminInitiateAuth',
                'cognito-idp:AdminCreateUser',
                'cognito-idp:AdminSetUserPassword',
                'cognito-idp:UpdateUserPoolClient',
                'cognito-idp:AdminDeleteUser'
            ]
        }));
        const vpc = new ec2.Vpc(this, VPC_NAME, {
            cidr: CIDR_BLOCK,
            maxAzs: MAX_AZs
        });
        const gatlingRepository = new ecr.Repository(this, ECR_GATLING_REPO_NAME, {
            repositoryName: ECR_GATLING_REPO_NAME
        });
        const mockDataRepository = new ecr.Repository(this, ECR_MOCKDATA_REPO_NAME, {
            repositoryName: ECR_MOCKDATA_REPO_NAME
        });
        const cluster = new ecs.Cluster(this, ECS_CLUSTER, {
            vpc: vpc,
            clusterName: ECS_CLUSTER
        });
        const gatlingTaskDefinition = new ecs.FargateTaskDefinition(this, GATLING_FARGATE_TASK_DEF, {
            family: GATLING_FARGATE_TASK_DEF,
            executionRole: role,
            taskRole: role,
            memoryLimitMiB: MEMORY_LIMIT,
            cpu: CPU
        });
        const mockDataTaskDefinition = new ecs.FargateTaskDefinition(this, MOCKDATA_FARGATE_TASK_DEF, {
            family: MOCKDATA_FARGATE_TASK_DEF,
            executionRole: role,
            taskRole: role,
            memoryLimitMiB: MEMORY_LIMIT,
            cpu: CPU
        });
        const gatlingLogging = new ecs.AwsLogDriver({
            logGroup: new aws_logs_1.LogGroup(this, GATLING_CONTAINER_NAME, {
                logGroupName: `/aws/ecs/${GATLING_CONTAINER_NAME}`,
                retention: aws_logs_1.RetentionDays.ONE_WEEK
            }),
            streamPrefix: "gatling"
        });
        const mockDatalogging = new ecs.AwsLogDriver({
            logGroup: new aws_logs_1.LogGroup(this, MOCKDATA_CONTAINER_NAME, {
                logGroupName: `/aws/ecs/${MOCKDATA_CONTAINER_NAME}`,
                retention: aws_logs_1.RetentionDays.ONE_WEEK
            }),
            streamPrefix: "mockdata"
        });
        const tokenCSV = ssm.StringParameter.valueForStringParameter(this, `/${BRANCH_NAME}/service/loadtest/csv/token`);
        const userCSV = ssm.StringParameter.valueForStringParameter(this, `/${BRANCH_NAME}/service/loadtest/csv/user`);
        const loadtestBucket = ssm.StringParameter.valueForStringParameter(this, `/${BRANCH_NAME}/service/s3/loadtest/bucket`);
        const userPoolID = ssm.StringParameter.valueForStringParameter(this, `/${BRANCH_NAME}/service/amplify/auth/userpool/id`);
        const cognitoClientID = ssm.StringParameter.valueForStringParameter(this, `/${BRANCH_NAME}/service/amplify/auth/userpool/clientId`);
        const appsyncAPIKey = ssm.StringParameter.valueForStringParameter(this, `/${BRANCH_NAME}/service/amplify/api/id`);
        const appsyncURL = ssm.StringParameter.valueForStringParameter(this, `/${BRANCH_NAME}/service/amplify/api/url`);
        const cognitoURL = ssm.StringParameter.valueForStringParameter(this, `/${BRANCH_NAME}/service/auth/userpool/url`);
        const apiURL = ssm.StringParameter.valueForStringParameter(this, `/${BRANCH_NAME}/service/payment/api/charge/url`);
        const stripePublicKey = ssm.StringParameter.valueForStringParameter(this, `/${BRANCH_NAME}/service/payment/stripe/publicKey`);
        const userCount = ssm.StringParameter.valueForStringParameter(this, `/${BRANCH_NAME}/service/loadtest/usercount`);
        const duration = ssm.StringParameter.valueForStringParameter(this, `/${BRANCH_NAME}/service/loadtest/duration`);
        // Create container from local `Dockerfile` for Gatling
        const gatlingAppContainer = gatlingTaskDefinition.addContainer(GATLING_CONTAINER_NAME, {
            image: ecs.ContainerImage.fromEcrRepository(gatlingRepository),
            logging: gatlingLogging,
            environment: {
                "APPSYNC_URL": appsyncURL,
                "API_URL": apiURL,
                "COGNITO_URL": cognitoURL,
                "TOKEN_CSV": tokenCSV,
                "STRIPE_PUBLIC_KEY": stripePublicKey,
                "USER_COUNT": userCount,
                "DURATION": duration
            }
        });
        const mockDataAppContainer = mockDataTaskDefinition.addContainer(MOCKDATA_CONTAINER_NAME, {
            image: ecs.ContainerImage.fromEcrRepository(mockDataRepository),
            logging: mockDatalogging,
            environment: {
                "TOKEN_CSV": tokenCSV,
                "USER_CSV": userCSV,
                "AWS_REGION": `${AWS_DEFAULT_REGION}`,
                "S3_BUCKET": loadtestBucket,
                "USER_POOL_ID": userPoolID,
                "COGNITO_CLIENT_ID": cognitoClientID,
                "FOLDERPATH": FOLDERPATH,
                "APPSYNC_API_KEY": appsyncAPIKey,
                "APPSYNC_URL": appsyncURL
            }
        });
        // Step function for setting the load test
        const setupUsers = new sfn.Task(this, "Setup Users", {
            task: new tasks.RunEcsFargateTask({
                cluster,
                taskDefinition: mockDataTaskDefinition,
                assignPublicIp: true,
                containerOverrides: [{
                        containerName: mockDataAppContainer.containerName,
                        command: aws_stepfunctions_1.Data.listAt('$.commands'),
                        environment: [
                            {
                                name: 'setup-users',
                                value: aws_stepfunctions_1.Context.taskToken
                            }
                        ]
                    }],
                integrationPattern: aws_stepfunctions_1.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN
            })
        });
        const loadFlights = new sfn.Task(this, "Load Flights", {
            task: new tasks.RunEcsFargateTask({
                cluster,
                taskDefinition: mockDataTaskDefinition,
                assignPublicIp: true,
                containerOverrides: [{
                        containerName: mockDataAppContainer.containerName,
                        command: aws_stepfunctions_1.Data.listAt('$.commands'),
                        environment: [
                            {
                                name: 'load-flights',
                                value: aws_stepfunctions_1.Context.taskToken
                            }
                        ]
                    }],
                integrationPattern: aws_stepfunctions_1.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN
            })
        });
        const runGatling = new sfn.Task(this, "Run Gatling", {
            task: new tasks.RunEcsFargateTask({
                cluster,
                taskDefinition: gatlingTaskDefinition,
                assignPublicIp: true,
                containerOverrides: [{
                        containerName: gatlingAppContainer.containerName,
                        command: aws_stepfunctions_1.Data.listAt('$.commands'),
                        environment: [
                            {
                                name: 'run-gatling',
                                value: aws_stepfunctions_1.Context.taskToken
                            }
                        ]
                    }],
                integrationPattern: aws_stepfunctions_1.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN
            })
        });
        const consolidateReport = new sfn.Task(this, "Consolidate Report", {
            task: new tasks.RunEcsFargateTask({
                cluster,
                taskDefinition: gatlingTaskDefinition,
                assignPublicIp: true,
                containerOverrides: [{
                        containerName: gatlingAppContainer.containerName,
                        command: aws_stepfunctions_1.Data.listAt('$.commands'),
                        environment: [
                            {
                                name: 'consolidate-report',
                                value: aws_stepfunctions_1.Context.taskToken
                            }
                        ]
                    }],
                integrationPattern: aws_stepfunctions_1.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN
            })
        });
        const cleanUp = new sfn.Task(this, "Clean Up", {
            task: new tasks.RunEcsFargateTask({
                cluster,
                taskDefinition: mockDataTaskDefinition,
                assignPublicIp: true,
                containerOverrides: [{
                        containerName: mockDataAppContainer.containerName,
                        command: aws_stepfunctions_1.Data.listAt('$.commands'),
                        environment: [
                            {
                                name: 'clean-up',
                                value: aws_stepfunctions_1.Context.taskToken
                            }
                        ]
                    }],
                integrationPattern: aws_stepfunctions_1.ServiceIntegrationPattern.WAIT_FOR_TASK_TOKEN
            })
        });
        const stepfuncDefinition = setupUsers
            .next(loadFlights)
            .next(runGatling)
            .next(consolidateReport)
            .next(cleanUp);
        const loadtestsfn = new sfn.StateMachine(this, STATE_MACHINE_NAME, {
            stateMachineName: STATE_MACHINE_NAME,
            definition: stepfuncDefinition
        });
        const ecsLambda = new lambda.Function(this, "ecstasklambda", {
            runtime: lambda.Runtime.NODEJS_10_X,
            handler: "index.handler",
            code: new lambda.AssetCode("lambda"),
            functionName: `${STACK_NAME}-ecs-task-change`
        });
        ecsLambda.addToRolePolicy(new aws_iam_1.PolicyStatement({
            actions: ["states:SendTaskSuccess"],
            resources: [loadtestsfn.stateMachineArn]
        }));
        const cwRule = new aws_events_1.Rule(this, "cw-rule", {
            description: "Rule that looks at ECS Task change state and triggers Lambda function",
            enabled: true,
            ruleName: "ECS-task-change-cdk",
            targets: []
        });
        new ssm.StringParameter(this, 'LoadTestS3Bucket', {
            // description: 'Some user-friendly description',
            parameterName: `/${BRANCH_NAME}/service/s3/loadtest/bucket`,
            stringValue: bucket.bucketName,
        });
        cwRule.addEventPattern({
            source: ['aws.ecs'],
            detailType: ["ECS Task State Change"],
            detail: {
                clusterArn: [cluster.clusterArn],
                lastStatus: ["STOPPED"]
            }
        });
        cwRule.addTarget(new targets.LambdaFunction(ecsLambda));
    }
}
exports.PerftestStackAirlineStack = PerftestStackAirlineStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZnRlc3Qtc3RhY2stYWlybGluZS1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBlcmZ0ZXN0LXN0YWNrLWFpcmxpbmUtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBc0M7QUFDdEMsd0NBQXdDO0FBQ3hDLHdDQUF3QztBQUN4Qyx3Q0FBd0M7QUFDeEMsOENBQTJFO0FBQzNFLGtEQUFtRDtBQUNuRCwwREFBMkQ7QUFDM0QsZ0RBQTREO0FBQzVELGtFQUFzRjtBQUN0RixzQ0FBdUM7QUFDdkMsb0RBQTJDO0FBQzNDLDhDQUE4QztBQUM5Qyx1REFBdUQ7QUFDdkQsd0NBQXlDO0FBRXpDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDO0FBQzFDLE1BQU0sU0FBUyxHQUFHLEdBQUcsVUFBVSxlQUFlLENBQUM7QUFDL0MsTUFBTSxRQUFRLEdBQUcsR0FBRyxVQUFVLE1BQU0sQ0FBQztBQUNyQyxNQUFNLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQztBQUNwQyxNQUFNLE9BQU8sR0FBRyxDQUFDLENBQUE7QUFDakIsTUFBTSxxQkFBcUIsR0FBRyxHQUFHLFVBQVUsVUFBVSxDQUFBO0FBQ3JELE1BQU0sc0JBQXNCLEdBQUcsR0FBRyxVQUFVLFdBQVcsQ0FBQTtBQUN2RCxNQUFNLFdBQVcsR0FBRyxHQUFHLFVBQVUsVUFBVSxDQUFBO0FBQzNDLE1BQU0sd0JBQXdCLEdBQUcsR0FBRyxVQUFVLG1CQUFtQixDQUFBO0FBQ2pFLE1BQU0seUJBQXlCLEdBQUcsR0FBRyxVQUFVLG9CQUFvQixDQUFBO0FBQ25FLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQTtBQUN6QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUE7QUFDaEIsTUFBTSxzQkFBc0IsR0FBRyxHQUFHLFVBQVUsb0JBQW9CLENBQUE7QUFDaEUsTUFBTSx1QkFBdUIsR0FBRyxHQUFHLFVBQVUscUJBQXFCLENBQUE7QUFDbEUsTUFBTSxr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U0FDOUMsQ0FBQyxDQUFBO1FBRUYsU0FBUyxDQUFDLGVBQWUsQ0FBQyxJQUFJLHlCQUFlLENBQUM7WUFDNUMsT0FBTyxFQUFFLENBQUMsd0JBQXdCLENBQUM7WUFDbkMsU0FBUyxFQUFFLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQztTQUN6QyxDQUFDLENBQUMsQ0FBQTtRQUVILE1BQU0sTUFBTSxHQUFHLElBQUksaUJBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFO1lBQ3ZDLFdBQVcsRUFBRSx1RUFBdUU7WUFDcEYsT0FBTyxFQUFFLElBQUk7WUFDYixRQUFRLEVBQUUscUJBQXFCO1lBQy9CLE9BQU8sRUFBRSxFQUNSO1NBQ0YsQ0FBQyxDQUFBO1FBRUYsSUFBSSxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRTtZQUNoRCxpREFBaUQ7WUFDakQsYUFBYSxFQUFFLElBQUksV0FBVyw2QkFBNkI7WUFDM0QsV0FBVyxFQUFFLE1BQU0sQ0FBQyxVQUFVO1NBRS9CLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxlQUFlLENBQUM7WUFDckIsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDO1lBQ25CLFVBQVUsRUFBRSxDQUFDLHVCQUF1QixDQUFDO1lBQ3JDLE1BQU0sRUFBRTtnQkFDTixVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO2dCQUNoQyxVQUFVLEVBQUUsQ0FBQyxTQUFTLENBQUM7YUFDeEI7U0FDRixDQUFDLENBQUE7UUFFRixNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBO0lBRXpELENBQUM7Q0FDRjtBQWxTRCw4REFrU0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY29yZScpO1xuaW1wb3J0IGVjMiA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1lYzInKVxuaW1wb3J0IGVjcyA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1lY3MnKVxuaW1wb3J0IGVjciA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1lY3InKVxuaW1wb3J0IHsgUm9sZSwgU2VydmljZVByaW5jaXBhbCwgUG9saWN5U3RhdGVtZW50IH0gZnJvbSAnQGF3cy1jZGsvYXdzLWlhbSc7XG5pbXBvcnQgc2ZuID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLXN0ZXBmdW5jdGlvbnMnKTtcbmltcG9ydCB0YXNrcyA9IHJlcXVpcmUoJ0Bhd3MtY2RrL2F3cy1zdGVwZnVuY3Rpb25zLXRhc2tzJyk7XG5pbXBvcnQgeyBMb2dHcm91cCwgUmV0ZW50aW9uRGF5cyB9IGZyb20gJ0Bhd3MtY2RrL2F3cy1sb2dzJztcbmltcG9ydCB7IERhdGEsIFNlcnZpY2VJbnRlZ3JhdGlvblBhdHRlcm4sIENvbnRleHQgfSBmcm9tICdAYXdzLWNkay9hd3Mtc3RlcGZ1bmN0aW9ucyc7XG5pbXBvcnQgczMgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtczMnKTtcbmltcG9ydCB7IFJ1bGUgfSBmcm9tICdAYXdzLWNkay9hd3MtZXZlbnRzJztcbmltcG9ydCBsYW1iZGEgPSByZXF1aXJlKCdAYXdzLWNkay9hd3MtbGFtYmRhJylcbmltcG9ydCB0YXJnZXRzID0gcmVxdWlyZSgnQGF3cy1jZGsvYXdzLWV2ZW50cy10YXJnZXRzJylcbmltcG9ydCBzc20gPSByZXF1aXJlKCdAYXdzLWNkay9hd3Mtc3NtJyk7XG5cbmNvbnN0IFNUQUNLX05BTUUgPSBwcm9jZXNzLmVudi5TVEFDS19OQU1FO1xuY29uc3QgUk9MRV9OQU1FID0gYCR7U1RBQ0tfTkFNRX0tZmFyZ2F0ZS1yb2xlYDtcbmNvbnN0IFZQQ19OQU1FID0gYCR7U1RBQ0tfTkFNRX0tdnBjYDtcbmNvbnN0IENJRFJfQkxPQ0sgPSBgMTk4LjE2Mi4wLjAvMjRgO1xuY29uc3QgTUFYX0FacyA9IDJcbmNvbnN0IEVDUl9HQVRMSU5HX1JFUE9fTkFNRSA9IGAke1NUQUNLX05BTUV9LWdhdGxpbmdgXG5jb25zdCBFQ1JfTU9DS0RBVEFfUkVQT19OQU1FID0gYCR7U1RBQ0tfTkFNRX0tbW9ja2RhdGFgXG5jb25zdCBFQ1NfQ0xVU1RFUiA9IGAke1NUQUNLX05BTUV9LWNsdXN0ZXJgXG5jb25zdCBHQVRMSU5HX0ZBUkdBVEVfVEFTS19ERUYgPSBgJHtTVEFDS19OQU1FfS1nYXRsaW5nLXRhc2stZGVmYFxuY29uc3QgTU9DS0RBVEFfRkFSR0FURV9UQVNLX0RFRiA9IGAke1NUQUNLX05BTUV9LW1vY2tkYXRhLXRhc2stZGVmYFxuY29uc3QgTUVNT1JZX0xJTUlUID0gMjA0OFxuY29uc3QgQ1BVID0gMTAyNFxuY29uc3QgR0FUTElOR19DT05UQUlORVJfTkFNRSA9IGAke1NUQUNLX05BTUV9LWdhdGxpbmctY29udGFpbmVyYFxuY29uc3QgTU9DS0RBVEFfQ09OVEFJTkVSX05BTUUgPSBgJHtTVEFDS19OQU1FfS1tb2NrZGF0YS1jb250YWluZXJgXG5jb25zdCBTVEFURV9NQUNISU5FX05BTUUgPSBgbG9hZHRlc3QtJHtTVEFDS19OQU1FfWBcbmNvbnN0IFMzX0JVQ0tFVF9OQU1FID0gYCR7U1RBQ0tfTkFNRX0tbG9hZHRlc3RgXG5jb25zdCBCUkFOQ0hfTkFNRSA9IHByb2Nlc3MuZW52LkFXU19CUkFOQ0hcbmNvbnN0IEZPTERFUlBBVEggPSBcIi4vXCJcblxuZXhwb3J0IGNsYXNzIFBlcmZ0ZXN0U3RhY2tBaXJsaW5lU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICBjb25zdHJ1Y3RvcihzY29wZTogY2RrLkFwcCwgaWQ6IHN0cmluZywgcHJvcHM/OiBjZGsuU3RhY2tQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgLy8gcmV0cmlldmluZyBhbGwgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gICAgY29uc3QgQVdTX0RFRkFVTFRfUkVHSU9OID0gcHJvY2Vzcy5lbnYuQVdTX0RFRkFVTFRfUkVHSU9OXG4gICAgY29uc3QgQ09HTklUT19VU0VSX1BPT0xfQVJOID0gcHJvY2Vzcy5lbnYuQ09HTklUT19VU0VSX1BPT0xfQVJOIHx8IFwibm90X2RlZmluZWRcIlxuICAgIGNvbnN0IFVTRVJfUE9PTF9JRCA9IHByb2Nlc3MuZW52LlVTRVJfUE9PTF9JRCB8fCBcIm5vdF9kZWZpbmVkXCJcbiAgICBjb25zdCBDT0dOSVRPX0NMSUVOVF9JRCA9IHByb2Nlc3MuZW52LkNPR05JVE9fQ0xJRU5UX0lEIHx8IFwibm90X2RlZmluZWRcIlxuICAgIGNvbnN0IENPR05JVE9fVVJMID0gYGh0dHBzOi8vY29nbml0by1pZHAuJHtBV1NfREVGQVVMVF9SRUdJT059LmFtYXpvbmF3cy5jb20vYFxuICAgIGNvbnN0IEFQUFNZTkNfVVJMID0gcHJvY2Vzcy5lbnYuQVBQU1lOQ19VUkwgfHwgXCJub3RfZGVmaW5lZFwiXG4gICAgY29uc3QgQVBJX1VSTCA9IHByb2Nlc3MuZW52LkFQSV9VUkwgfHwgXCJub3RfZGVmaW5lZFwiXG4gICAgY29uc3QgR1JBUEhRTF9BUElfSUQgPSBwcm9jZXNzLmVudi5HUkFQSFFMX0FQSV9JRCB8fCBcIm5vdF9kZWZpbmVkXCJcblxuICAgIGNvbnN0IHJvbGUgPSBuZXcgUm9sZSh0aGlzLCBST0xFX05BTUUsIHtcbiAgICAgIHJvbGVOYW1lOiBST0xFX05BTUUsXG4gICAgICBhc3N1bWVkQnk6IG5ldyBTZXJ2aWNlUHJpbmNpcGFsKCdlY3MtdGFza3MuYW1hem9uYXdzLmNvbScpXG4gICAgfSlcblxuICAgIGNvbnN0IGJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQodGhpcywgXCJzM2J1Y2tldFwiLCB7XG4gICAgICBidWNrZXROYW1lOiBTM19CVUNLRVRfTkFNRVxuICAgIH0pXG5cbiAgICByb2xlLmFkZFRvUG9saWN5KG5ldyBQb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgcmVzb3VyY2VzOiBbXG4gICAgICAgIGAke2J1Y2tldC5idWNrZXRBcm59YCxcbiAgICAgICAgYCR7YnVja2V0LmJ1Y2tldEFybn0vKmBcbiAgICAgIF0sXG4gICAgICBhY3Rpb25zOiBbXG4gICAgICAgICdzMzpQdXRPYmplY3QnLFxuICAgICAgICAnczM6R2V0T2JqZWN0QWNsJyxcbiAgICAgICAgJ3MzOkdldE9iamVjdCcsXG4gICAgICAgICdzMzpMaXN0QnVja2V0JyxcbiAgICAgICAgJ3MzOlB1dE9iamVjdEFjbCcsXG4gICAgICAgICdzMzpEZWxldGVPYmplY3QnXG4gICAgICBdXG4gICAgfSkpXG5cbiAgICByb2xlLmFkZFRvUG9saWN5KG5ldyBQb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgcmVzb3VyY2VzOiBbYCR7Q09HTklUT19VU0VSX1BPT0xfQVJOfWBdLFxuICAgICAgYWN0aW9uczogW1xuICAgICAgICAnY29nbml0by1pZHA6QWRtaW5Jbml0aWF0ZUF1dGgnLFxuICAgICAgICAnY29nbml0by1pZHA6QWRtaW5DcmVhdGVVc2VyJyxcbiAgICAgICAgJ2NvZ25pdG8taWRwOkFkbWluU2V0VXNlclBhc3N3b3JkJyxcbiAgICAgICAgJ2NvZ25pdG8taWRwOlVwZGF0ZVVzZXJQb29sQ2xpZW50JyxcbiAgICAgICAgJ2NvZ25pdG8taWRwOkFkbWluRGVsZXRlVXNlcidcbiAgICAgIF1cbiAgICB9KSlcblxuICAgIGNvbnN0IHZwYyA9IG5ldyBlYzIuVnBjKHRoaXMsIFZQQ19OQU1FLCB7XG4gICAgICBjaWRyOiBDSURSX0JMT0NLLFxuICAgICAgbWF4QXpzOiBNQVhfQVpzXG4gICAgfSlcblxuXG4gICAgY29uc3QgZ2F0bGluZ1JlcG9zaXRvcnkgPSBuZXcgZWNyLlJlcG9zaXRvcnkodGhpcywgRUNSX0dBVExJTkdfUkVQT19OQU1FLCB7XG4gICAgICByZXBvc2l0b3J5TmFtZTogRUNSX0dBVExJTkdfUkVQT19OQU1FXG4gICAgfSk7XG5cbiAgICBjb25zdCBtb2NrRGF0YVJlcG9zaXRvcnkgPSBuZXcgZWNyLlJlcG9zaXRvcnkodGhpcywgRUNSX01PQ0tEQVRBX1JFUE9fTkFNRSwge1xuICAgICAgcmVwb3NpdG9yeU5hbWU6IEVDUl9NT0NLREFUQV9SRVBPX05BTUVcbiAgICB9KTtcblxuICAgIGNvbnN0IGNsdXN0ZXIgPSBuZXcgZWNzLkNsdXN0ZXIodGhpcywgRUNTX0NMVVNURVIsIHtcbiAgICAgIHZwYzogdnBjLFxuICAgICAgY2x1c3Rlck5hbWU6IEVDU19DTFVTVEVSXG4gICAgfSk7XG5cbiAgICBjb25zdCBnYXRsaW5nVGFza0RlZmluaXRpb24gPSBuZXcgZWNzLkZhcmdhdGVUYXNrRGVmaW5pdGlvbih0aGlzLCBHQVRMSU5HX0ZBUkdBVEVfVEFTS19ERUYsIHtcbiAgICAgIGZhbWlseTogR0FUTElOR19GQVJHQVRFX1RBU0tfREVGLFxuICAgICAgZXhlY3V0aW9uUm9sZTogcm9sZSxcbiAgICAgIHRhc2tSb2xlOiByb2xlLFxuICAgICAgbWVtb3J5TGltaXRNaUI6IE1FTU9SWV9MSU1JVCxcbiAgICAgIGNwdTogQ1BVXG4gICAgfSk7XG5cbiAgICBjb25zdCBtb2NrRGF0YVRhc2tEZWZpbml0aW9uID0gbmV3IGVjcy5GYXJnYXRlVGFza0RlZmluaXRpb24odGhpcywgTU9DS0RBVEFfRkFSR0FURV9UQVNLX0RFRiwge1xuICAgICAgZmFtaWx5OiBNT0NLREFUQV9GQVJHQVRFX1RBU0tfREVGLFxuICAgICAgZXhlY3V0aW9uUm9sZTogcm9sZSxcbiAgICAgIHRhc2tSb2xlOiByb2xlLFxuICAgICAgbWVtb3J5TGltaXRNaUI6IE1FTU9SWV9MSU1JVCxcbiAgICAgIGNwdTogQ1BVXG4gICAgfSk7XG5cbiAgICBjb25zdCBnYXRsaW5nTG9nZ2luZyA9IG5ldyBlY3MuQXdzTG9nRHJpdmVyKHtcbiAgICAgIGxvZ0dyb3VwOiBuZXcgTG9nR3JvdXAodGhpcywgR0FUTElOR19DT05UQUlORVJfTkFNRSwge1xuICAgICAgICBsb2dHcm91cE5hbWU6IGAvYXdzL2Vjcy8ke0dBVExJTkdfQ09OVEFJTkVSX05BTUV9YCxcbiAgICAgICAgcmV0ZW50aW9uOiBSZXRlbnRpb25EYXlzLk9ORV9XRUVLXG4gICAgICB9KSxcbiAgICAgIHN0cmVhbVByZWZpeDogXCJnYXRsaW5nXCJcbiAgICB9KVxuXG4gICAgY29uc3QgbW9ja0RhdGFsb2dnaW5nID0gbmV3IGVjcy5Bd3NMb2dEcml2ZXIoe1xuICAgICAgbG9nR3JvdXA6IG5ldyBMb2dHcm91cCh0aGlzLCBNT0NLREFUQV9DT05UQUlORVJfTkFNRSwge1xuICAgICAgICBsb2dHcm91cE5hbWU6IGAvYXdzL2Vjcy8ke01PQ0tEQVRBX0NPTlRBSU5FUl9OQU1FfWAsXG4gICAgICAgIHJldGVudGlvbjogUmV0ZW50aW9uRGF5cy5PTkVfV0VFS1xuICAgICAgfSksXG4gICAgICBzdHJlYW1QcmVmaXg6IFwibW9ja2RhdGFcIlxuICAgIH0pXG5cbiAgICBjb25zdCB0b2tlbkNTViA9IHNzbS5TdHJpbmdQYXJhbWV0ZXIudmFsdWVGb3JTdHJpbmdQYXJhbWV0ZXIodGhpcywgYC8ke0JSQU5DSF9OQU1FfS9zZXJ2aWNlL2xvYWR0ZXN0L2Nzdi90b2tlbmApO1xuICAgIGNvbnN0IHVzZXJDU1YgPSBzc20uU3RyaW5nUGFyYW1ldGVyLnZhbHVlRm9yU3RyaW5nUGFyYW1ldGVyKHRoaXMsIGAvJHtCUkFOQ0hfTkFNRX0vc2VydmljZS9sb2FkdGVzdC9jc3YvdXNlcmApO1xuICAgIGNvbnN0IGxvYWR0ZXN0QnVja2V0ID0gc3NtLlN0cmluZ1BhcmFtZXRlci52YWx1ZUZvclN0cmluZ1BhcmFtZXRlcih0aGlzLCBgLyR7QlJBTkNIX05BTUV9L3NlcnZpY2UvczMvbG9hZHRlc3QvYnVja2V0YCk7XG4gICAgY29uc3QgdXNlclBvb2xJRCA9IHNzbS5TdHJpbmdQYXJhbWV0ZXIudmFsdWVGb3JTdHJpbmdQYXJhbWV0ZXIodGhpcywgYC8ke0JSQU5DSF9OQU1FfS9zZXJ2aWNlL2FtcGxpZnkvYXV0aC91c2VycG9vbC9pZGApO1xuICAgIGNvbnN0IGNvZ25pdG9DbGllbnRJRCA9IHNzbS5TdHJpbmdQYXJhbWV0ZXIudmFsdWVGb3JTdHJpbmdQYXJhbWV0ZXIodGhpcywgYC8ke0JSQU5DSF9OQU1FfS9zZXJ2aWNlL2FtcGxpZnkvYXV0aC91c2VycG9vbC9jbGllbnRJZGApO1xuICAgIGNvbnN0IGFwcHN5bmNBUElLZXkgPSBzc20uU3RyaW5nUGFyYW1ldGVyLnZhbHVlRm9yU3RyaW5nUGFyYW1ldGVyKHRoaXMsIGAvJHtCUkFOQ0hfTkFNRX0vc2VydmljZS9hbXBsaWZ5L2FwaS9pZGApXG4gICAgY29uc3QgYXBwc3luY1VSTCA9IHNzbS5TdHJpbmdQYXJhbWV0ZXIudmFsdWVGb3JTdHJpbmdQYXJhbWV0ZXIodGhpcywgYC8ke0JSQU5DSF9OQU1FfS9zZXJ2aWNlL2FtcGxpZnkvYXBpL3VybGApXG4gICAgY29uc3QgY29nbml0b1VSTCA9IHNzbS5TdHJpbmdQYXJhbWV0ZXIudmFsdWVGb3JTdHJpbmdQYXJhbWV0ZXIodGhpcywgYC8ke0JSQU5DSF9OQU1FfS9zZXJ2aWNlL2F1dGgvdXNlcnBvb2wvdXJsYClcbiAgICBjb25zdCBhcGlVUkwgPSBzc20uU3RyaW5nUGFyYW1ldGVyLnZhbHVlRm9yU3RyaW5nUGFyYW1ldGVyKHRoaXMsIGAvJHtCUkFOQ0hfTkFNRX0vc2VydmljZS9wYXltZW50L2FwaS9jaGFyZ2UvdXJsYClcbiAgICBjb25zdCBzdHJpcGVQdWJsaWNLZXkgPSBzc20uU3RyaW5nUGFyYW1ldGVyLnZhbHVlRm9yU3RyaW5nUGFyYW1ldGVyKHRoaXMsIGAvJHtCUkFOQ0hfTkFNRX0vc2VydmljZS9wYXltZW50L3N0cmlwZS9wdWJsaWNLZXlgKVxuICAgIGNvbnN0IHVzZXJDb3VudCA9IHNzbS5TdHJpbmdQYXJhbWV0ZXIudmFsdWVGb3JTdHJpbmdQYXJhbWV0ZXIodGhpcywgYC8ke0JSQU5DSF9OQU1FfS9zZXJ2aWNlL2xvYWR0ZXN0L3VzZXJjb3VudGApXG4gICAgY29uc3QgZHVyYXRpb24gPSBzc20uU3RyaW5nUGFyYW1ldGVyLnZhbHVlRm9yU3RyaW5nUGFyYW1ldGVyKHRoaXMsIGAvJHtCUkFOQ0hfTkFNRX0vc2VydmljZS9sb2FkdGVzdC9kdXJhdGlvbmApXG5cbiAgICAvLyBDcmVhdGUgY29udGFpbmVyIGZyb20gbG9jYWwgYERvY2tlcmZpbGVgIGZvciBHYXRsaW5nXG4gICAgY29uc3QgZ2F0bGluZ0FwcENvbnRhaW5lciA9IGdhdGxpbmdUYXNrRGVmaW5pdGlvbi5hZGRDb250YWluZXIoR0FUTElOR19DT05UQUlORVJfTkFNRSwge1xuICAgICAgaW1hZ2U6IGVjcy5Db250YWluZXJJbWFnZS5mcm9tRWNyUmVwb3NpdG9yeShnYXRsaW5nUmVwb3NpdG9yeSksXG4gICAgICBsb2dnaW5nOiBnYXRsaW5nTG9nZ2luZyxcbiAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgIFwiQVBQU1lOQ19VUkxcIjogYXBwc3luY1VSTCxcbiAgICAgICAgXCJBUElfVVJMXCI6IGFwaVVSTCxcbiAgICAgICAgXCJDT0dOSVRPX1VSTFwiOiBjb2duaXRvVVJMLFxuICAgICAgICBcIlRPS0VOX0NTVlwiOiB0b2tlbkNTVixcbiAgICAgICAgXCJTVFJJUEVfUFVCTElDX0tFWVwiOiBzdHJpcGVQdWJsaWNLZXksXG4gICAgICAgIFwiVVNFUl9DT1VOVFwiOiB1c2VyQ291bnQsXG4gICAgICAgIFwiRFVSQVRJT05cIjogZHVyYXRpb25cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IG1vY2tEYXRhQXBwQ29udGFpbmVyID0gbW9ja0RhdGFUYXNrRGVmaW5pdGlvbi5hZGRDb250YWluZXIoTU9DS0RBVEFfQ09OVEFJTkVSX05BTUUsIHtcbiAgICAgIGltYWdlOiBlY3MuQ29udGFpbmVySW1hZ2UuZnJvbUVjclJlcG9zaXRvcnkobW9ja0RhdGFSZXBvc2l0b3J5KSxcbiAgICAgIGxvZ2dpbmc6IG1vY2tEYXRhbG9nZ2luZyxcbiAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgIFwiVE9LRU5fQ1NWXCI6IHRva2VuQ1NWLFxuICAgICAgICBcIlVTRVJfQ1NWXCI6IHVzZXJDU1YsXG4gICAgICAgIFwiQVdTX1JFR0lPTlwiOiBgJHtBV1NfREVGQVVMVF9SRUdJT059YCxcbiAgICAgICAgXCJTM19CVUNLRVRcIjogbG9hZHRlc3RCdWNrZXQsXG4gICAgICAgIFwiVVNFUl9QT09MX0lEXCI6IHVzZXJQb29sSUQsXG4gICAgICAgIFwiQ09HTklUT19DTElFTlRfSURcIjogY29nbml0b0NsaWVudElELFxuICAgICAgICBcIkZPTERFUlBBVEhcIjogRk9MREVSUEFUSCxcbiAgICAgICAgXCJBUFBTWU5DX0FQSV9LRVlcIjogYXBwc3luY0FQSUtleSxcbiAgICAgICAgXCJBUFBTWU5DX1VSTFwiOiBhcHBzeW5jVVJMXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBTdGVwIGZ1bmN0aW9uIGZvciBzZXR0aW5nIHRoZSBsb2FkIHRlc3RcbiAgICBjb25zdCBzZXR1cFVzZXJzID0gbmV3IHNmbi5UYXNrKHRoaXMsIFwiU2V0dXAgVXNlcnNcIiwge1xuICAgICAgdGFzazogbmV3IHRhc2tzLlJ1bkVjc0ZhcmdhdGVUYXNrKHtcbiAgICAgICAgY2x1c3RlcixcbiAgICAgICAgdGFza0RlZmluaXRpb246IG1vY2tEYXRhVGFza0RlZmluaXRpb24sXG4gICAgICAgIGFzc2lnblB1YmxpY0lwOiB0cnVlLFxuICAgICAgICBjb250YWluZXJPdmVycmlkZXM6IFt7XG4gICAgICAgICAgY29udGFpbmVyTmFtZTogbW9ja0RhdGFBcHBDb250YWluZXIuY29udGFpbmVyTmFtZSxcbiAgICAgICAgICBjb21tYW5kOiBEYXRhLmxpc3RBdCgnJC5jb21tYW5kcycpLFxuICAgICAgICAgIGVudmlyb25tZW50OiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5hbWU6ICdzZXR1cC11c2VycycsXG4gICAgICAgICAgICAgIHZhbHVlOiBDb250ZXh0LnRhc2tUb2tlblxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfV0sXG4gICAgICAgIGludGVncmF0aW9uUGF0dGVybjogU2VydmljZUludGVncmF0aW9uUGF0dGVybi5XQUlUX0ZPUl9UQVNLX1RPS0VOXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBjb25zdCBsb2FkRmxpZ2h0cyA9IG5ldyBzZm4uVGFzayh0aGlzLCBcIkxvYWQgRmxpZ2h0c1wiLCB7XG4gICAgICB0YXNrOiBuZXcgdGFza3MuUnVuRWNzRmFyZ2F0ZVRhc2soe1xuICAgICAgICBjbHVzdGVyLFxuICAgICAgICB0YXNrRGVmaW5pdGlvbjogbW9ja0RhdGFUYXNrRGVmaW5pdGlvbixcbiAgICAgICAgYXNzaWduUHVibGljSXA6IHRydWUsXG4gICAgICAgIGNvbnRhaW5lck92ZXJyaWRlczogW3tcbiAgICAgICAgICBjb250YWluZXJOYW1lOiBtb2NrRGF0YUFwcENvbnRhaW5lci5jb250YWluZXJOYW1lLFxuICAgICAgICAgIGNvbW1hbmQ6IERhdGEubGlzdEF0KCckLmNvbW1hbmRzJyksXG4gICAgICAgICAgZW52aXJvbm1lbnQ6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogJ2xvYWQtZmxpZ2h0cycsXG4gICAgICAgICAgICAgIHZhbHVlOiBDb250ZXh0LnRhc2tUb2tlblxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfV0sXG4gICAgICAgIGludGVncmF0aW9uUGF0dGVybjogU2VydmljZUludGVncmF0aW9uUGF0dGVybi5XQUlUX0ZPUl9UQVNLX1RPS0VOXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBjb25zdCBydW5HYXRsaW5nID0gbmV3IHNmbi5UYXNrKHRoaXMsIFwiUnVuIEdhdGxpbmdcIiwge1xuICAgICAgdGFzazogbmV3IHRhc2tzLlJ1bkVjc0ZhcmdhdGVUYXNrKHtcbiAgICAgICAgY2x1c3RlcixcbiAgICAgICAgdGFza0RlZmluaXRpb246IGdhdGxpbmdUYXNrRGVmaW5pdGlvbixcbiAgICAgICAgYXNzaWduUHVibGljSXA6IHRydWUsXG4gICAgICAgIGNvbnRhaW5lck92ZXJyaWRlczogW3tcbiAgICAgICAgICBjb250YWluZXJOYW1lOiBnYXRsaW5nQXBwQ29udGFpbmVyLmNvbnRhaW5lck5hbWUsXG4gICAgICAgICAgY29tbWFuZDogRGF0YS5saXN0QXQoJyQuY29tbWFuZHMnKSxcbiAgICAgICAgICBlbnZpcm9ubWVudDogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiAncnVuLWdhdGxpbmcnLFxuICAgICAgICAgICAgICB2YWx1ZTogQ29udGV4dC50YXNrVG9rZW5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1dLFxuICAgICAgICBpbnRlZ3JhdGlvblBhdHRlcm46IFNlcnZpY2VJbnRlZ3JhdGlvblBhdHRlcm4uV0FJVF9GT1JfVEFTS19UT0tFTlxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgY29uc3QgY29uc29saWRhdGVSZXBvcnQgPSBuZXcgc2ZuLlRhc2sodGhpcywgXCJDb25zb2xpZGF0ZSBSZXBvcnRcIiwge1xuICAgICAgdGFzazogbmV3IHRhc2tzLlJ1bkVjc0ZhcmdhdGVUYXNrKHtcbiAgICAgICAgY2x1c3RlcixcbiAgICAgICAgdGFza0RlZmluaXRpb246IGdhdGxpbmdUYXNrRGVmaW5pdGlvbixcbiAgICAgICAgYXNzaWduUHVibGljSXA6IHRydWUsXG4gICAgICAgIGNvbnRhaW5lck92ZXJyaWRlczogW3tcbiAgICAgICAgICBjb250YWluZXJOYW1lOiBnYXRsaW5nQXBwQ29udGFpbmVyLmNvbnRhaW5lck5hbWUsXG4gICAgICAgICAgY29tbWFuZDogRGF0YS5saXN0QXQoJyQuY29tbWFuZHMnKSxcbiAgICAgICAgICBlbnZpcm9ubWVudDogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiAnY29uc29saWRhdGUtcmVwb3J0JyxcbiAgICAgICAgICAgICAgdmFsdWU6IENvbnRleHQudGFza1Rva2VuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XSxcbiAgICAgICAgaW50ZWdyYXRpb25QYXR0ZXJuOiBTZXJ2aWNlSW50ZWdyYXRpb25QYXR0ZXJuLldBSVRfRk9SX1RBU0tfVE9LRU5cbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGNvbnN0IGNsZWFuVXAgPSBuZXcgc2ZuLlRhc2sodGhpcywgXCJDbGVhbiBVcFwiLCB7XG4gICAgICB0YXNrOiBuZXcgdGFza3MuUnVuRWNzRmFyZ2F0ZVRhc2soe1xuICAgICAgICBjbHVzdGVyLFxuICAgICAgICB0YXNrRGVmaW5pdGlvbjogbW9ja0RhdGFUYXNrRGVmaW5pdGlvbixcbiAgICAgICAgYXNzaWduUHVibGljSXA6IHRydWUsXG4gICAgICAgIGNvbnRhaW5lck92ZXJyaWRlczogW3tcbiAgICAgICAgICBjb250YWluZXJOYW1lOiBtb2NrRGF0YUFwcENvbnRhaW5lci5jb250YWluZXJOYW1lLFxuICAgICAgICAgIGNvbW1hbmQ6IERhdGEubGlzdEF0KCckLmNvbW1hbmRzJyksXG4gICAgICAgICAgZW52aXJvbm1lbnQ6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogJ2NsZWFuLXVwJyxcbiAgICAgICAgICAgICAgdmFsdWU6IENvbnRleHQudGFza1Rva2VuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XSxcbiAgICAgICAgaW50ZWdyYXRpb25QYXR0ZXJuOiBTZXJ2aWNlSW50ZWdyYXRpb25QYXR0ZXJuLldBSVRfRk9SX1RBU0tfVE9LRU5cbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGNvbnN0IHN0ZXBmdW5jRGVmaW5pdGlvbiA9IHNldHVwVXNlcnNcbiAgICAgIC5uZXh0KGxvYWRGbGlnaHRzKVxuICAgICAgLm5leHQocnVuR2F0bGluZylcbiAgICAgIC5uZXh0KGNvbnNvbGlkYXRlUmVwb3J0KVxuICAgICAgLm5leHQoY2xlYW5VcClcblxuICAgIGNvbnN0IGxvYWR0ZXN0c2ZuID0gbmV3IHNmbi5TdGF0ZU1hY2hpbmUodGhpcywgU1RBVEVfTUFDSElORV9OQU1FLCB7XG4gICAgICBzdGF0ZU1hY2hpbmVOYW1lOiBTVEFURV9NQUNISU5FX05BTUUsXG4gICAgICBkZWZpbml0aW9uOiBzdGVwZnVuY0RlZmluaXRpb25cbiAgICB9KVxuXG4gICAgY29uc3QgZWNzTGFtYmRhID0gbmV3IGxhbWJkYS5GdW5jdGlvbih0aGlzLCBcImVjc3Rhc2tsYW1iZGFcIiwge1xuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzEwX1gsXG4gICAgICBoYW5kbGVyOiBcImluZGV4LmhhbmRsZXJcIixcbiAgICAgIGNvZGU6IG5ldyBsYW1iZGEuQXNzZXRDb2RlKFwibGFtYmRhXCIpLFxuICAgICAgZnVuY3Rpb25OYW1lOiBgJHtTVEFDS19OQU1FfS1lY3MtdGFzay1jaGFuZ2VgXG4gICAgfSlcblxuICAgIGVjc0xhbWJkYS5hZGRUb1JvbGVQb2xpY3kobmV3IFBvbGljeVN0YXRlbWVudCh7XG4gICAgICBhY3Rpb25zOiBbXCJzdGF0ZXM6U2VuZFRhc2tTdWNjZXNzXCJdLFxuICAgICAgcmVzb3VyY2VzOiBbbG9hZHRlc3RzZm4uc3RhdGVNYWNoaW5lQXJuXVxuICAgIH0pKVxuXG4gICAgY29uc3QgY3dSdWxlID0gbmV3IFJ1bGUodGhpcywgXCJjdy1ydWxlXCIsIHtcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlJ1bGUgdGhhdCBsb29rcyBhdCBFQ1MgVGFzayBjaGFuZ2Ugc3RhdGUgYW5kIHRyaWdnZXJzIExhbWJkYSBmdW5jdGlvblwiLFxuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIHJ1bGVOYW1lOiBcIkVDUy10YXNrLWNoYW5nZS1jZGtcIixcbiAgICAgIHRhcmdldHM6IFtcbiAgICAgIF1cbiAgICB9KVxuXG4gICAgbmV3IHNzbS5TdHJpbmdQYXJhbWV0ZXIodGhpcywgJ0xvYWRUZXN0UzNCdWNrZXQnLCB7XG4gICAgICAvLyBkZXNjcmlwdGlvbjogJ1NvbWUgdXNlci1mcmllbmRseSBkZXNjcmlwdGlvbicsXG4gICAgICBwYXJhbWV0ZXJOYW1lOiBgLyR7QlJBTkNIX05BTUV9L3NlcnZpY2UvczMvbG9hZHRlc3QvYnVja2V0YCxcbiAgICAgIHN0cmluZ1ZhbHVlOiBidWNrZXQuYnVja2V0TmFtZSxcbiAgICAgIC8vIGFsbG93ZWRQYXR0ZXJuOiAnLionLFxuICAgIH0pO1xuXG4gICAgY3dSdWxlLmFkZEV2ZW50UGF0dGVybih7XG4gICAgICBzb3VyY2U6IFsnYXdzLmVjcyddLFxuICAgICAgZGV0YWlsVHlwZTogW1wiRUNTIFRhc2sgU3RhdGUgQ2hhbmdlXCJdLFxuICAgICAgZGV0YWlsOiB7XG4gICAgICAgIGNsdXN0ZXJBcm46IFtjbHVzdGVyLmNsdXN0ZXJBcm5dLFxuICAgICAgICBsYXN0U3RhdHVzOiBbXCJTVE9QUEVEXCJdXG4gICAgICB9XG4gICAgfSlcblxuICAgIGN3UnVsZS5hZGRUYXJnZXQobmV3IHRhcmdldHMuTGFtYmRhRnVuY3Rpb24oZWNzTGFtYmRhKSlcblxuICB9XG59XG4iXX0=